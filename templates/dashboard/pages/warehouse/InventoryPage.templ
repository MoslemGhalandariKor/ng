package warehouse

import (
	"nextgen/pkg/product_management"
	"nextgen/templates/components"
	"nextgen/templates/dashboard/dashboardcomponents"
)

type InventoryPageProps struct {
	LayoutProp               dashboardcomponents.LayoutProp
	WarehouseHeaderPageProps []WarehouseHeaderPageProps
	FormLayoutSimpleProp     components.FormLayoutSimpleProp
	Products                 []product_management.ProductView
}

templ InventoryPage(inventoryPageProps InventoryPageProps) {
	@dashboardcomponents.Layout(InventoryPageContent(inventoryPageProps), inventoryPageProps.LayoutProp)
}

templ InventoryPageContent(inventoryPageProps InventoryPageProps) {
	@WarehouseHeaderPage(inventoryPageProps.WarehouseHeaderPageProps)
	<div class="mt-2">
		<div class=" flex rounded-lg justify-center ">
			<div class=" m-2 w-full bg-gray-200 rounded-2xl">
				<section class="bg-gray-200 rounded-2xl p-8">
					<div class="bg-white relative shadow-md sm:rounded-lg overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-2xl">
						<!-- Search in  -->
						<div class="flex flex-col md:flex-row items-stretch md:items-center md:space-x-3 space-y-3 md:space-y-0 justify-between mx-4 py-4  ">
							<div class="w-full md:w-1/2">
								<form class="flex items-center">
									<label for="simple-search" class="sr-only">Search</label>
									<div class="relative w-full">
										<div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
											<svg aria-hidden="true" class="w-5 h-5 text-gray-500 " fill="currentColor" viewbox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
												<path fill-rule="evenodd" clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"></path>
											</svg>
										</div>
										<input type="text" id="simple-search" placeholder="Search in Search" required="" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full pl-10 p-2   dark:focus:ring-primary-500 dark:focus:border-primary-500"/>
									</div>
								</form>
							</div>
						</div>
						<!-- Title -->
						<h2 class="text-2xl font-bold mb-4 text-center">Warehouse Inventory</h2>
						<!-- Add New Product Button -->
						<button id="addNewButton" class=" rounded-xl ml-12 bg-blue-700 hover:bg-blue-800 text-white px-4 py-2 rounded mb-4">+ Add New Product</button>
						<!-- Inventory Table -->
						<div class="overflow-x-auto">
							<div class="relative overflow-x-auto">
								<table class="w-full text-sm text-left rtl:text-right text-gray-500">
									<thead class="text-xs text-gray-700 uppercase bg-gray-200 ">
										<tr>
											<th scope="col" class=" px-6 py-3">Name</th>
											<th scope="col" class=" px-6 py-3">Stock</th>
											<th scope="col" class=" px-6 py-3">Color</th>
											<th scope="col" class=" px-6 py-3">Size</th>
											<th scope="col" class=" px-6 py-3">Material</th>
											<th scope="col" class=" px-6 py-3">User</th>
											<th scope="col" class=" px-6 py-3">Price</th>
											<th scope="col" class=" px-6 py-3">Warehouse</th>
											<th scope="col" class=" px-6 py-3">Actions</th>
										</tr>
									</thead>
									<tbody>
										for _, product := range inventoryPageProps.Products {
											@ProductList(product)
										}
									</tbody>
								</table>
							</div>
						</div>
						<!-- Add/Edit Form -->
						// <div id="productForm" class="hidden mt-6">
						// 	<h3 class="text-xl font-bold mb-2" id="formTitle">Add New Product</h3>
						// 	<form id="productFormElement" class="grid grid-cols-2 gap-4">
						// 		<input type="hidden" id="editIndex"/>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Name</label>
						// 			<input type="text" id="productName" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Stock</label>
						// 			<input type="number" id="productStock" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Color</label>
						// 			<input type="text" id="productColor" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Size</label>
						// 			<input type="text" id="productSize" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Material</label>
						// 			<input type="text" id="productMaterial" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">User</label>
						// 			<input type="text" id="productUser" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Price ($)</label>
						// 			<input type="number" id="productPrice" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div>
						// 			<label class="block text-sm font-semibold">Warehouse</label>
						// 			<input type="text" id="productWarehouse" class="w-full p-2 border rounded-lg" required/>
						// 		</div>
						// 		<div class="col-span-2">
						// 			<button type="submit" class="w-full bg-blue-500 text-white p-2 rounded-lg">Save Product</button>
						// 		</div>
						// 	</form>
						// </div>
					</div>
				</section>
			</div>
		</div>
	</div>
	// <script>
	//     document.addEventListener("DOMContentLoaded", function () {
	//         const inventoryTable = document.getElementById("inventoryBody");
	//         const productForm = document.getElementById("productForm");
	//         const productFormElement = document.getElementById("productFormElement");
	//         const addNewButton = document.getElementById("addNewButton");
	//         const formTitle = document.getElementById("formTitle");
	//         let editRow = null;
	//         // Show Add New Product Form
	//         addNewButton.addEventListener("click", function () {
	//             editRow = null;
	//             formTitle.textContent = "Add New Product";
	//             productFormElement.reset();
	//             productForm.classList.remove("hidden");
	//         });
	//         // Handle Edit
	//         inventoryTable.addEventListener("click", function (event) {
	//             if (event.target.classList.contains("edit-btn")) {
	//                 let row = event.target.closest("tr");
	//                 let cells = row.querySelectorAll("td");
	//                 document.getElementById("productName").value = cells[1].innerText;
	//                 document.getElementById("productStock").value = cells[2].innerText;
	//                 document.getElementById("productColor").value = cells[3].innerText;
	//                 document.getElementById("productSize").value = cells[4].innerText;
	//                 document.getElementById("productMaterial").value = cells[5].innerText;
	//                 document.getElementById("productUser").value = cells[6].innerText;
	//                 document.getElementById("productPrice").value = parseFloat(cells[7].innerText.replace("$", ""));
	//                 document.getElementById("productWarehouse").value = cells[8].innerText;
	//                 editRow = row;
	//                 formTitle.textContent = "Edit Product";
	//                 productForm.classList.remove("hidden");
	//             }
	//         });
	//         // Handle Delete
	//         inventoryTable.addEventListener("click", function (event) {
	//             if (event.target.classList.contains("delete-btn")) {
	//                 let row = event.target.closest("tr");
	//                 row.remove();
	//             }
	//         });
	//         // Handle Form Submission
	//         productFormElement.addEventListener("submit", function (event) {
	//             event.preventDefault();
	//             let productData = {
	//                 name: document.getElementById("productName").value,
	//                 stock: document.getElementById("productStock").value,
	//                 color: document.getElementById("productColor").value,
	//                 size: document.getElementById("productSize").value,
	//                 material: document.getElementById("productMaterial").value,
	//                 user: document.getElementById("productUser").value,
	//                 price: parseFloat(document.getElementById("productPrice").value).toFixed(2),
	//                 warehouse: document.getElementById("productWarehouse").value,
	//             };
	//             if (editRow) {
	//                 let cells = editRow.querySelectorAll("td");
	//                 cells[1].innerText = productData.name;
	//                 cells[2].innerText = productData.stock;
	//                 cells[3].innerText = productData.color;
	//                 cells[4].innerText = productData.size;
	//                 cells[5].innerText = productData.material;
	//                 cells[6].innerText = productData.user;
	//                 cells[7].innerText = `$${productData.price}`;
	//                 cells[8].innerText = productData.warehouse;
	//             } else {
	//                 inventoryTable.insertAdjacentHTML("beforeend", `<tr>
	//                     <td class="border p-2 text-center">${inventoryTable.rows.length + 1}</td>
	//                     <td class="border p-2">${productData.name}</td>
	//                     <td class="border p-2">${productData.stock}</td>
	//                     <td class="border p-2">${productData.color}</td>
	//                     <td class="border p-2">${productData.size}</td>
	//                     <td class="border p-2">${productData.material}</td>
	//                     <td class="border p-2">${productData.user}</td>
	//                     <td class="border p-2">$${productData.price}</td>
	//                     <td class="border p-2">${productData.warehouse}</td>
	//                     <td class="border p-2"><button class="edit-btn bg-yellow-500 text-white px-3 py-1 rounded">Edit</button> <button class="delete-btn bg-red-500 text-white px-3 py-1 rounded">Delete</button></td>
	//                 </tr>`);
	//             }
	//             productForm.classList.add("hidden");
	//             productFormElement.reset();
	//         });
	//     });
	// </script>
}

templ ProductList(product product_management.ProductView) {
	<tr class="bg-white border-b border-gray-200">
		<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap ">{ product.Name }</th>
		<td class="px-6 py-4">{ product.Amount }</td>
		<td class="px-6 py-4">{ product.ProdColor }</td>
		<td class="px-6 py-4">{ product.ProdSize }</td>
		<td class="px-6 py-4">{ product.ProdMaterial }</td>
		<td class="px-6 py-4">Admin</td>
		<td class="px-6 py-4">{ product.Price }</td>
		<td class="px-6 py-4">Warehouse A</td>
		<td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 flex justify-between">
			<button class="py-2 px-3 flex items-center text-sm font-medium text-center text-gray-900 hover:text-gray-600 bg-gray-200 hover:bg-gray-300 rounded-lg  focus:z-10 focus:ring-4 focus:ring-gray-200 focus:outline-none">Edit</button>
			<button class="py-2 px-3 flex items-center text-sm font-medium text-center text-gray-100 bg-red-600 hover:bg-red-700 rounded-lg  focus:z-10 focus:ring-4 focus:ring-red-200 focus:outline-none">Delete</button>
		</td>
	</tr>
}
